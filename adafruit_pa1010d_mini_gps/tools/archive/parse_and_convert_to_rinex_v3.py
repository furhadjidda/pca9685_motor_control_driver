import datetime


def parse_nmea_line(line):
    """
    Parse an NMEA sentence and extract GNSS data.
    Args:
        line (str): A single NMEA sentence.
    Returns:
        dict: Parsed GNSS data or None for irrelevant lines.
    """
    parts = line.split(',')

    if line.startswith("$GPGGA") or line.startswith("$GNGGA"):  # Position data
        if len(parts) < 10:
            return None
        try:
            # Extract UTC time
            utc_time = parts[1]
            if len(utc_time) < 6:
                return None
            hours, minutes = int(utc_time[:2]), int(utc_time[2:4])
            seconds = float(utc_time[4:])
            timestamp = f"{hours:02}:{minutes:02}:{seconds:06.3f}"

            # Latitude and longitude
            latitude = float(parts[2]) if parts[2] else 0.0
            lat_dir = parts[3]
            longitude = float(parts[4]) if parts[4] else 0.0
            lon_dir = parts[5]
            altitude = float(parts[9]) if parts[9] else 0.0

            return {
                "type": "GGA",
                "time": timestamp,
                "latitude": latitude if lat_dir == 'N' else -latitude,
                "longitude": longitude if lon_dir == 'E' else -longitude,
                "altitude": altitude,
                "satellites": int(parts[7]) if parts[7].isdigit() else 0,
                "hdop": float(parts[8]) if parts[8] else 0.0,
            }
        except ValueError:
            return None

    if line.startswith("$GPGSV") or line.startswith("$GLGSV") or line.startswith("$GAGSV") or line.startswith("$BDGSV"):  # Satellite data
        try:
            gnss_type = line[1:3]  # GNSS system identifier (GP, GL, GA, BD)
            num_satellites = int(parts[3])
            satellites = []
            for i in range(4, len(parts) - 4, 4):  # Each satellite occupies 4 fields
                if len(parts) > i + 3:
                    satellite = {
                        "gnss": gnss_type,
                        "prn": int(parts[i]),
                        "elevation": float(parts[i + 1]),
                        "azimuth": float(parts[i + 2]),
                        "snr": float(parts[i + 3]) if parts[i + 3].strip() else None,
                    }
                    satellites.append(satellite)
            return {"type": "GSV", "num_satellites": num_satellites, "satellites": satellites}
        except ValueError:
            return None

    return None


def nmea_to_rinex(nmea_file, rinex_file):
    """
    Convert NMEA log file to RINEX version 3 format with all relevant information.
    Args:
        nmea_file (str): Path to input NMEA file.
        rinex_file (str): Path to output RINEX file.
    """
    try:
        with open(nmea_file, 'r') as nmea, open(rinex_file, 'w') as rinex:
            # Write RINEX header
            now = datetime.datetime.utcnow()
            rinex.write("     3.03           OBSERVATION DATA    MIXED           RINEX VERSION / TYPE\n")
            rinex.write(f"Generated by NMEA to RINEX script\n")
            rinex.write(f"{now.strftime('%Y%m%d %H%M%S UTC')}                              TIME OF CREATION\n")
            rinex.write("                                                            END OF HEADER\n")

            for line in nmea:
                parsed = parse_nmea_line(line)
                if parsed:
                    if parsed["type"] == "GGA":
                        rinex.write(f"> {now.strftime('%Y %m %d %H %M %S')}  0\n")
                        rinex.write(
                            f"GPS   {parsed['latitude']:14.8f}   {parsed['longitude']:14.8f}   {parsed['altitude']:14.4f}\n"
                        )
                    elif parsed["type"] == "GSV":
                        for sat in parsed["satellites"]:
                            system_code = {
                                "GP": "G",  # GPS
                                "GL": "R",  # GLONASS
                                "GA": "E",  # Galileo
                                "BD": "C",  # BeiDou
                            }.get(sat["gnss"], "X")  # Default to unknown system
                            rinex.write(
                                f"{system_code}{sat['prn']:02}   {sat['elevation']:14.4f}   {sat['azimuth']:14.4f}   {sat['snr'] or 0:14.4f}\n"
                            )

    except Exception as e:
        print(f"Error: {e}")


# Usage
nmea_file_path = "nmea_log.txt"  # Path to your NMEA log file
rinex_file_path = "output_rinex.obs"  # Output RINEX file path

nmea_to_rinex(nmea_file_path, rinex_file_path)
